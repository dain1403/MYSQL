-- 1. product 테이블 생성
CREATE TABLE PRODUCT(
P_CODE CHAR(3) NOT NULL,
P_NAME VARCHAR2(30),
P_COST NUMBER,
P_GROUP VARCHAR2(30),
CONSTRAINT P_CODE_PRI PRIMARY KEY(P_CODE));

-- 2. PRODUCT 테이블 구조 검색
DESC PRODUCT;

-- 3.상품정보(PRODUCT)테이블에 다음과 같은 상품 정보 삽입
INSERT INTO PRODUCT
VALUES ('101','19인치 모니터',150000,'모니터') ;
INSERT INTO PRODUCT
VALUES ('102','22인치 모니터',200000,'모니터') ;
INSERT INTO PRODUCT
VALUES('103','25인치 모니터',260000,'모니터') ;
INSERT INTO PRODUCT
VALUES ('201','유선마우스',7000,'마우스') ;
INSERT INTO PRODUCT
VALUES ('202','무선마우스',18000,'마우스') ;
INSERT INTO PRODUCT
VALUES ('301','유선키보드',8000,'키보드') ;
INSERT INTO PRODUCT
VALUES ('302','무선키보드',22000,'키보드') ;
INSERT INTO PRODUCT
VALUES ('401','2채널 스피커',10000,'스피커') ;
INSERT INTO PRODUCT
VALUES ('402','5.1채널 스피커',120000,'스피커') ;

--4.PRODUCT 테이블의 모든 데이터 검색
SELECT *
FROM PRODUCT;

--5. 거래내역(TRADE)테이블 생성
CREATE TABLE TRADE(
T_SEQ NUMBER NOT NULL,
P_CODE CHAR(3),
C_CODE VARCHAR2(4),
T_DATE DATE,
T_QTY NUMBER,
T_COST NUMBER,
T_TAX NUMBER,
CONSTRAINT T_SEQ_PRI PRIMARY KEY (T_SEQ));

--6.TRADE 테이블 구조 출력
DESC TRADE;

-- 7. TRADE 테이블에 다음과 같은 거래내역 정보를 삽입
INSERT INTO TRADE
VALUES (61,'131','101',to_date('2016-04-01','yyyy-mm-dd'),10,150000,150000) ;
INSERT INTO TRADE
VALUES (5,'102','102',to_date('2016-04-26','yyyy-mm-dd'),8,200000,160000) ;
INSERT INTO TRADE
VALUES (8,'103','101',to_date('2016-05-20','yyyy-mm-dd'),2,260000,52000) ;
INSERT INTO TRADE
VALUES (3,'201','103',to_date('2016-04-13','yyyy-mm-dd'),7,7000,4900) ;
INSERT INTO TRADE
VALUES (2,'201','101',to_date('2016-04-12','yyyy-mm-dd'),5,7000,3500) ;
INSERT INTO TRADE
VALUES (9,'202','104',to_date('2016-06-02','yyyy-mm-dd'),8,18000,14400) ;
INSERT INTO TRADE
VALUES (6,'301','103',to_date('2016-05-02','yyyy-mm-dd'),12,8000,9600) ;
INSERT INTO TRADE
VALUES (10,'302','103',to_date('2016-0-6-09','yyyy-mm-dd'),9,22000,19800) ;
INSERT INTO TRADE
VALUES (4,'401','104',to_date('2016-04-20','yyyy-mm-dd'),15,10000,15000) ;
INSERT INTO TRADE
VALUES (11,'401','105',to_date('2016-06-15','yyyy-mm-dd'),20,10000,20000) ;
INSERT INTO TRADE
VALUES (7,'402','102',to_date('2016-05-08','yyyy-mm-dd'),5,120000,60000) ;

--8. TRADE 테이블의 모든 데이터를 검색
SELECT *
FROM TRADE;

-- 9.CUSTOMER 테이블 생성
CREATE TABLE CUSTOMER (
C_CODE VARCHAR2(4) NOT NULL,
C_NAME VARCHAR2(30),
C_CEO VARCHAR2(12),
C_ADDR VARCHAR(100),
C_PHONE VARCHAR(13),
CONSTRAINT C_CODE_PRI PRIMARY KEY(C_CODE));

-- 10. 거래처 정보(CUSTOMER) 테이블 구조 검색
DESC CUSTOMER;

--11. 거래처 정보(CUSTOMER)테이블에 다음과 같은 정보를 삽입
INSERT INTO CUSTOMER 
VALUES ('101','늘푸른회사','김수종','경기도 안산시','010-1234-5678');
INSERT INTO CUSTOMER
VALUES ('102','사랑과바다','박나리','경기도 평택시','010-1122-3344');
INSERT INTO CUSTOMER
VALUES ('103','대한회사','이민수','서울시 구로구', '010-3785-8809');
INSERT INTO CUSTOMER
VALUES ('104','하얀기판','허진수','경상북도 포항시','010-8569-3468');
INSERT INTO CUSTOMER
VALUES ('105','한마음한뜻','하민우','인천시 남동구','010-9455-6033');

-- 12. CUSTOMER 테이블 모두 검색
SELECT *
FROM CUSTOMER;

--13. 재고(STOCK)테이블 생성
CREATE TABLE STOCK(
P_CODE CHAR(3) NOT NULL,
S_QTY NUMBER NOT NULL,
S_LASTDATE DATE,
CONSTRAINT PRI_K PRIMARY KEY (P_CODE,S_QTY));

-- 14. STOCK 테이블 구조 검색
DESC STOCK;

-- 15.STOCK 테이블에 다음과 같은 상품 재고 정보를 삽입
INSERT INTO STOCK
VALUES ('101',50,TO_DATE('2016-04-01','yyyy-mm-dd'));
INSERT INTO STOCK
VALUES ('102',20,TO_DATE('2016-04-26','yyyy-mm-dd'));
INSERT INTO STOCK
VALUES ('103',5,TO_DATE('2016-05-20','yyyy-mm-dd'));
INSERT INTO STOCK
VALUES ('201',2,TO_DATE('2016-04-13','yyyy-mm-dd'));
INSERT INTO STOCK
VALUES ('202',15,TO_DATE('2016-06-02','yyyy-mm-dd'));
INSERT INTO STOCK
VALUES ('301',0,TO_DATE('2016-05-02','yyyy-mm-dd'));
INSERT INTO STOCK
VALUES ('302',20,TO_DATE('2016-06-09','yyyy-mm-dd'));
INSERT INTO STOCK
VALUES ('401',10,TO_DATE('2016-06-15','yyyy-mm-dd'));
INSERT INTO STOCK
VALUES ('402',7,TO_DATE('2016-05-08','yyyy-mm-dd'));

-- 16. STOCK 테이블의 모든 데이터 검색
SELECT *
FROM STOCK;

-- 17. PRODUCT 테이블에 비고 열을 삽입하라
ALTER TABLE PRODUCT
ADD (비고 VARCHAR2(20));

-- 18. 새로운 열이 상품정보(PRODUCT)테이블에 삽입되어있는지 확인
SELECT * FROM PRODUCT;

-- 19. PRODUCT 테이블에 비고 열의 구조를 변경
ALTER TABLE PRODUCT 
MODIFY (비고 VARCHAR(25));

-- 20. 변경된 비고 열의 구조를 검색
DESC PRODUCT;

--23.PRODUCT 테이블의 이름을 PRODUCT1로 변경하라
RENAME PRODUCT TO PRODUCT1;

-- 24. PRODUCT 테이블의 이름이 변경되었는지 확인
 SELECT *
 FROM USER_TABLES
 WHERE TABLE_NAME = 'PRODUCT1';

-- 26. 확인을 위해 정보(product)테이블의 내용 검색
SELECT *
FROM PRODUCT;

-- 28. 상품정보(PRODUCT)테이블 결과를 확인하라
SELECT *
FROM PRODUCT1;

--29. 상품(PRODUCT)에 기본키를 상품 재고(STOCK)테이블에 외래키 제약ㅇ조건을 삽입하는 예이다
--    결과를 확인하라

ALTER TABLE PRODUCT1
ADD CONSTRAINT P_P_CODE PRIMARY KEY(P_CODE);

ALTER TABLE STOCK
ADD CONSTRAINT F_P_CODE FOREIGN KEY (P_CODE)
REFERENCES PRODUCT1 (P_CODE);

SELECT OWNER, CONSTRAINT_NAME, TABLE_NAME
FROM USER_CONSTRAINTS
WHERE TABLE_NAME IN ('PRODUCT1','STOCK');

-- 30. 상품코드 401에 대한 거래내역 뷰(V_TRADE)를 만들어라
CREATE VIEW V_TRADE
AS
SELECT *
FROM TRADE
WHERE P_CODE = 401;

SELECT * 
FROM V_TRADE;

-- 31. 상품코드 401에 대한 거래내역 뷰의 내용을 확인
SELECT * 
FROM V_TRADE
WHERE P_CODE = 401;

-- 32. 상품 정보(product)테이블에 가장 최근에 들어온 거래처 코드 정보를 검색하라
SELECT *
FROM PRODUCT1;
SELECT  *
FROM TRADE;

SELECT C_CODE
FROM TRADE
WHERE T_DATE = (SELECT MAX(T_DATE)
                FROM TRADE);


